plot <- plot + xlab("Beep intensity [dB]")
plot <- plot + theme_classic(16)
plot <- plot + theme(aspect.ratio = 1)
plot
##plain plot
plot <- ggplot()
plot <- plot + geom_line(mapping =aes(x=visualRange,y=visualPC))
plot <- plot + ylim(0,1)
plot <- plot + scale_x_continuous(breaks = seq(0,4,1), labels = c(0,10,20,30,40))
plot <- plot + ylab("Proportion of \"Yes\" responses")
plot <- plot + xlab("Beep intensity [dB]")
plot <- plot + theme_classic(16)
plot <- plot + theme(aspect.ratio = 1)
plot
##plain plot
plot <- ggplot()
plot <- plot + geom_line(mapping =aes(x=visualRange,y=visualPC))
plot <- plot + ylim(0,1)
plot <- plot + scale_x_continuous(breaks = seq(0,4,1), labels = c(0,5,10,20,25))
plot <- plot + theme_classic(16)
plot <- plot + theme(aspect.ratio = 1)
plot
##plain plot
plot <- ggplot()
plot <- plot + geom_line(mapping =aes(x=visualRange,y=visualPC))
plot <- plot + ylim(0,1)
plot <- plot + scale_x_continuous(breaks = seq(0,4,1), title=NULL, labels = c(0,5,10,20,25))
plot <- plot + theme_classic(16)
plot <- plot + theme(aspect.ratio = 1)
plot
##plain plot
plot <- ggplot()
plot <- plot + geom_line(mapping =aes(x=visualRange,y=visualPC))
plot <- plot + ylim(0,1)
plot <- plot + xlab("")
plot <- plot + ylab("")
plot <- plot + scale_x_continuous(breaks = seq(0,4,1), title=NULL, labels = c(0,5,10,20,25))
plot <- plot + theme_classic(16)
plot <- plot + theme(aspect.ratio = 1)
##plain plot
plot <- ggplot()
plot <- plot + geom_line(mapping =aes(x=visualRange,y=visualPC))
plot <- plot + ylim(0,1)
plot <- plot + xlab("")
plot <- plot + ylab("")
plot <- plot + scale_x_continuous(breaks = seq(0,4,1), labels = c(0,5,10,20,25))
plot <- plot + theme_classic(16)
plot <- plot + theme(aspect.ratio = 1)
plot
##plain plot
plot <- ggplot()
plot <- plot + geom_line(mapping =aes(x=visualRange,y=visualPC))
plot <- plot + ylim(0,1)
plot <- plot + xlab("")
plot <- plot + ylab("")
plot <- plot + scale_y_continuous(breaks = c(0,0.5,0.95,1))
plot <- plot + scale_x_continuous(breaks = seq(0,4,1), labels = c(0,5,10,20,25))
plot <- plot + theme_classic(16)
##plain plot
plot <- ggplot()
plot <- plot + geom_line(mapping =aes(x=visualRange,y=visualPC))
plot <- plot + xlab("")
plot <- plot + ylab("")
plot <- plot + scale_y_continuous(breaks = c(0,0.5,0.95,1), limits = c(0,1))
plot <- plot + scale_x_continuous(breaks = seq(0,4,1), labels = c(0,5,10,20,25))
plot <- plot + theme_classic(16)
plot <- plot + theme(aspect.ratio = 1)
plot
set.seed(16)
pfm <- PFm(PF("gauss", "al", 0.4,0.05,c(1,1)), predictor = c(0,1,1.5,2,3,4), observations = rep(30,6), type = "PC")
visualRange <- seq(-1,5,length.out = 100)
visualPC <- predict(pfm,visualRange)
visualPoints <- noisedPredict(pfm,pfm$data$predictor, noiseDistr = "binomial")
plot <- ggplot()
plot <- plot + geom_point(mapping =aes(x=pfm$data$predictor,y=visualPoints), size=4, colour="black", fill="white", shape=21, stroke=2)
plot <- plot + geom_line(mapping =aes(x=visualRange,y=visualPC))
plot <- plot + geom_point(mapping =aes(x=pfm$perf_th,y=predict(pfm, pfm$perf_th)), size=4, colour="green", shape="triangle")
plot <- plot + ylim(0,1)
plot <- plot + scale_x_continuous(breaks = seq(0,4,1), labels = c(0,10,20,30,40))
plot <- plot + ylab("Proportion of \"Yes\" responses")
plot <- plot + xlab("Beep intensity [dB]")
plot <- plot + theme_classic(16)
plot <- plot + theme(aspect.ratio = 1)
plot
##plain plot
plot <- ggplot()
plot <- plot + geom_line(mapping =aes(x=visualRange,y=visualPC))
plot <- plot + xlab("")
plot <- plot + ylab("")
##plain plot
plot <- ggplot()
plot <- plot + geom_line(mapping =aes(x=visualRange,y=visualPC))
plot <- plot + xlab("")
plot <- plot + ylab("")
plot <- plot + scale_y_continuous(breaks = c(0,0.5,0.95,1), limits = c(0,1))
plot <- plot + scale_x_continuous(breaks = seq(0,4,1), labels = c(0,5,10,20,25))
plot <- plot + theme_classic(16)
plot <- plot + theme(aspect.ratio = 1)
plot
##plain plot
plot <- ggplot()
plot <- plot + geom_line(mapping =aes(x=visualRange,y=visualPC))
plot <- plot + xlab("abscissa")
plot <- plot + ylab("ordinate")
plot <- plot + scale_y_continuous(breaks = c(0,0.5,0.95,1), limits = c(0,1))
plot <- plot + scale_x_continuous(breaks = seq(0,4,1), labels = c(0,5,10,20,25))
plot <- plot + theme_classic(16)
plot <- plot + theme(aspect.ratio = 1)
plot
set.seed(16)
pfm <- PFm(PF("gauss", "al", 0.4,0.1,c(1,1)), predictor = c(0,1,1.5,2,3,4), observations = rep(30,6), type = "PC")
##plain plot
plot <- ggplot()
plot <- plot + geom_line(mapping =aes(x=visualRange,y=visualPC))
plot <- plot + xlab("abscissa")
plot <- plot + ylab("ordinate")
plot <- plot + scale_y_continuous(breaks = c(0,0.5,0.95,1), limits = c(0,1))
plot <- plot + scale_x_continuous(breaks = seq(0,4,1), labels = c(0,5,10,20,25))
plot <- plot + theme_classic(16)
plot <- plot + theme(aspect.ratio = 1)
plot
##plain plot
plot <- ggplot()
plot <- plot + geom_line(mapping =aes(x=visualRange,y=visualPC))
plot <- plot + xlab("abscissa")
plot <- plot + ylab("ordinate")
plot <- plot + scale_y_continuous(breaks = c(0,0.5,0.90,1), limits = c(0,1))
plot <- plot + scale_x_continuous(breaks = seq(0,4,1), labels = c(0,5,10,20,25))
plot <- plot + theme_classic(16)
plot <- plot + theme(aspect.ratio = 1)
plot
pfm <- PFm(PF("gauss", "al", 0.4,0.1,c(1,1)), predictor = c(0,1,1.5,2,3,4), observations = rep(30,6), type = "PC")
visualRange <- seq(-1,5,length.out = 100)
visualPC <- predict(pfm,visualRange)
visualPoints <- noisedPredict(pfm,pfm$data$predictor, noiseDistr = "binomial")
##plain plot
plot <- ggplot()
plot <- plot + geom_line(mapping =aes(x=visualRange,y=visualPC))
plot <- plot + xlab("abscissa")
plot <- plot + ylab("ordinate")
plot <- plot + scale_y_continuous(breaks = c(0,0.5,0.90,1), limits = c(0,1))
plot <- plot + scale_x_continuous(breaks = seq(0,4,1), labels = c(0,5,10,20,25))
plot <- plot + theme_classic(16)
plot <- plot + theme(aspect.ratio = 1)
plot
##plain plot
plot <- ggplot()
plot <- plot + geom_line(mapping =aes(x=visualRange,y=visualPC))
plot <- plot + xlab("abscissa")
plot <- plot + ylab("ordinate")
plot <- plot + scale_y_continuous(breaks = c(0,0.5,0.90,1), limits = c(0,1))
plot <- plot + scale_x_continuous(breaks = seq(0,4,1), labels = c(5,10,20,25,30))
plot <- plot + theme_classic(16)
plot <- plot + theme(aspect.ratio = 1)
plot
##plain plot
plot <- ggplot()
plot <- plot + geom_line(mapping =aes(x=visualRange,y=visualPC), col="grey")
plot <- plot + xlab("abscissa")
plot <- plot + ylab("ordinate")
plot <- plot + scale_y_continuous(breaks = c(0,0.5,0.90,1), limits = c(0,1))
plot <- plot + scale_x_continuous(breaks = seq(0,4,1), labels = c(5,10,20,25,30))
plot <- plot + theme_classic(16)
plot <- plot + theme(aspect.ratio = 1)
plot
##plain plot
plot <- ggplot()
plot <- plot + geom_line(mapping =aes(x=visualRange,y=visualPC),width=2, col="grey")
plot <- plot + xlab("abscissa")
plot <- plot + ylab("ordinate")
plot <- plot + scale_y_continuous(breaks = c(0,0.5,0.90,1), limits = c(0,1))
plot <- plot + scale_x_continuous(breaks = seq(0,4,1), labels = c(5,10,20,25,30))
plot <- plot + theme_classic(16)
plot <- plot + theme(aspect.ratio = 1)
##plain plot
plot <- ggplot()
plot <- plot + geom_line(mapping =aes(x=visualRange,y=visualPC),size=2, col="grey")
plot <- plot + xlab("abscissa")
plot <- plot + ylab("ordinate")
plot <- plot + scale_y_continuous(breaks = c(0,0.5,0.90,1), limits = c(0,1))
plot <- plot + scale_x_continuous(breaks = seq(0,4,1), labels = c(5,10,20,25,30))
plot <- plot + theme_classic(16)
plot <- plot + theme(aspect.ratio = 1)
plot
#Illustration Psychophysical experiment
library(PsyFuns)
library(ggplot2)
set.seed(16)
pfm <- PFm(PF("gauss", "al", 0.4,0.1,c(1,1)), predictor = c(0,1,1.5,2,3,4), observations = rep(30,6), type = "PC")
visualRange <- seq(-1,5,length.out = 100)
visualPC <- predict(pfm,visualRange)
visualPoints <- noisedPredict(pfm,pfm$data$predictor, noiseDistr = "binomial")
plot <- ggplot()
plot <- plot + geom_point(mapping =aes(x=pfm$data$predictor,y=visualPoints), size=4, colour="black", fill="white", shape=21, stroke=2)
plot <- plot + geom_line(mapping =aes(x=visualRange,y=visualPC))
plot <- plot + geom_point(mapping =aes(x=pfm$perf_th,y=predict(pfm, pfm$perf_th)), size=4, colour="green", shape="triangle")
plot <- plot + ylim(0,1)
plot <- plot + scale_x_continuous(breaks = seq(0,4,1), labels = c(0,10,20,30,40))
plot <- plot + ylab("Proportion of \"Yes\" responses")
plot <- plot + xlab("Beep intensity [dB]")
plot <- plot + theme_classic(16)
plot <- plot + theme(aspect.ratio = 1)
plot
##plain plot
pfm <- PFm(PF("gauss", "al", 0.4,0.1,c(1,1)), predictor = c(0,1,1.5,2,3,4), observations = rep(30,6), type = "PC")
visualRange <- seq(-1,5,length.out = 100)
visualPC <- predict(pfm,visualRange)
plot <- ggplot()
plot <- plot + geom_line(mapping =aes(x=visualRange,y=visualPC),size=2, col="grey")
plot <- plot + xlab("abscissa")
plot <- plot + ylab("ordinate")
plot <- plot + scale_y_continuous(breaks = c(0,0.5,0.90,1), limits = c(0,1))
plot <- plot + scale_x_continuous(breaks = seq(0,4,1), labels = c(5,10,20,25,30))
plot <- plot + theme_classic(16)
plot <- plot + theme(aspect.ratio = 1)
plot
PsyFuns:::weibull.orig.cdf
library(PsyFuns)
# They are generated by INNER WEIBULL FUNCTION: F = 1 - e^((x/a)^b)
# with parameters: a=8.85/((log(2)^(1/3))), b=3
pars <- c(8.85/((log(2)^(1/3))), 3)
OrdToAbs <- function(ordinates){
PsyFuns:::polynom.inverse_x.cdf(
PsyFuns:::exponential.inverse.cdf(
ordinates),
pars)
}
# performance threshold is set to 8.85
perf_th <- OrdToAbs(0.5)
perf_th
#
#Interquartile range is set to 4.5
iqr <- OrdToAbs(0.75) - OrdToAbs(0.25)
iqr
#
# Width range is set to 10.7
width <- OrdToAbs(0.95) - OrdToAbs(0.05)
width
#s1 - symetric close
# Ordinal values of s1 (0.3,0.4,0.48,0.52,0.6,0.7)
o1 <- c(0.3,0.4,0.48,0.52,0.6,0.7)
x1 <- OrdToAbs(o1)
x1 <- round(x1,2)
x1
#s2 - symetric apart
# Ordinal values of s2 (0.1,0.3,0.40,0.6,0.7,0.9)
o2 <- c(0.1,0.3,0.40,0.6,0.7,0.9)
x2 <- OrdToAbs(o2)
x2 <- round(x2,2)
x2
#s3 - nonsymetric skewed towards high performance
# Ordinal values of s3 (0.3,0.44,0.7,0.8,0.9,0.98)
o3 <- c(0.3,0.44,0.7,0.8,0.9,0.98)
x3 <- OrdToAbs(o3)
x3 <- round(x3,2)
x3
#s4 - nonsymetric skewed towards low performance
# Ordinal values of s4 (0.1,0.2,0.3,0.4,0.5,0.6)
o4 <- c(0.1,0.2,0.3,0.4,0.5,0.6)
x4 <- OrdToAbs(o4)
x4 <- round(x4,2)
x4
#s5 - nonsymetric skewed towards high performance
# Ordinal values of s5 (0.08,0.18,0.28,0.70,0.85,0.99)
o5 <- c(0.08,0.18,0.28,0.70,0.85,0.99)
x5 <- OrdToAbs(o5)
x5 <- round(x5,2)
x5
#s6 - nonsymetric closely disperse, one outlier
# Ordinal values of s6 (0.3,0.4,0.5,0.6,0.7,0.99)
o6 <- c(0.3,0.4,0.5,0.6,0.7,0.99)
x6 <- OrdToAbs(o6)
x6 <- round(x6,2)
x6
#s5 - nonsymetric skewed towards high performance
# Ordinal values of s7 (0.34,0.44,0.54,0.8,0.9,0.98)
o7 <- c(0.34,0.44,0.54,0.8,0.9,0.98)
x7 <- OrdToAbs(o7)
x7 <- round(x7,2)
x7
####
func <- PF("exponential","polynom",0,0,c(8.85/((log(2)^(1/3))), 3))
func1 <- PF("gumbel_r", "ab", 0, 0, c(8.85 + log(log(2))*2.86, 2.86))
func2 <- PF("gumbel_l", "ab", 0, 0, c(8.85 - log(log(2))*2.86, 2.86))
func3 <- PF("logistic", "ab", 0, 0, c(8.85, 2.05))
func4 <- PF("gauss",    "ab", 0, 0, c(8.85, 3.34))
func5 <- PF("cauchy",   "ab", 0, 0, c(8.85, 2.05))
func6 <- PF("htan",     "ab", 0, 0, c(8.85, 4.1))
diff1 <- sum(abs(predict(func1,x1) - o1))
diff1
diff2 <- sum(abs(predict(func2,x1) - o1))
diff2
diff3 <- sum(abs(predict(func3,x1) - o1))
diff3
PsyFuns:::weibull.orig.cdf
PsyFuns:::gumbel_l.inverse.cdf
PsyFuns:::gumbel_l.orig.cdf
funcA <- PF("gumbel_l","logy",0,0,c(3, 30))
funcB <- PF("gumbel_l","weibull",0,0,c(8.85, 3*log(2)/(2*8.85)))
x <- seq(0,20,length.out = 100)
ggplot() + geom_line(mapping = aes(x=x, predict(func,x))) + geom_line(mapping = aes(x=x, predict(funcA,x), col="red")) + geom_line(mapping = aes(x=x, predict(funcB,x), col="blue"))
ggplot() + geom_line(mapping = aes(x=x, predict(func,x))) + geom_line(mapping = aes(x=x, predict(funcA,x), col="red")) + geom_line(mapping = aes(x=x, predict(funcB,x), col="blue"))
ggplot() + geom_line(mapping = aes(x=x, predict(func,x))) + geom_line(mapping = aes(x=x, predict(funcA,x), color="red")) + geom_line(mapping = aes(x=x, predict(funcB,x), color="blue"))
ggplot() + geom_line(mapping = aes(x=x, predict(func,x))) + geom_line(mapping = aes(x=x, predict(funcA,x)), color="red") + geom_line(mapping = aes(x=x, predict(funcB,x)), colour="blue")
funcA <- PF("gumbel_l","logy",0,0,c(3, 3*log(10)))
ggplot() + geom_line(mapping = aes(x=x, predict(func,x))) + geom_line(mapping = aes(x=x, predict(funcA,x)), color="red") + geom_line(mapping = aes(x=x, predict(funcB,x)), colour="blue")
funcA <- PF("gumbel_l","logy",0,0,c(3, 3*log(8.85/((log(2)^(1/3))))))
ggplot() + geom_line(mapping = aes(x=x, predict(func,x))) + geom_line(mapping = aes(x=x, predict(funcA,x)), color="red") + geom_line(mapping = aes(x=x, predict(funcB,x)), colour="blue")
funcA <- PF("gumbel_l","logy",0,0,c(3, -3*log(8.85/((log(2)^(1/3))))))
ggplot() + geom_line(mapping = aes(x=x, predict(func,x))) + geom_line(mapping = aes(x=x, predict(funcA,x)), color="red") + geom_line(mapping = aes(x=x, predict(funcB,x)), colour="blue")
c(3, -3*log(8.85/((log(2)^(1/3)))))
c(3, -3*log(10))
# number of Simulations
# NUmber of Distribution schemes
DS <- 7
# Schemes of number of observations
ON <- 4
#Number of functions
F <- 3
#Parameter variants
PV <- 2
#Guess/Lapse rate combinations
GL <- 3
#Noise types and parameters
N <- 1
#Number of simulations per all previous
NOS <- 10
NumberOfSimulations <- DS*ON*F*PV*GL*N*NOS
NumberOfSimulations
# number of Simulations
# NUmber of Distribution schemes
DS <- 7
# Schemes of number of observations
ON <- 4
#Sigmoid number
S <- 6
#Core number
C <- 3
#Parameter variants
PV <- 1
#Guess/Lapse rate combinations
GL <- 3
#Noise types and parameters
N <- 1
#Number of simulations per all previous
NOS <- 50
NumberOfSimulations <- DS*ON*S*C*PV*GL*N*NOS
NumberOfSimulations
75600/5040
50*15
# number of Simulations
# NUmber of Distribution schemes
DS <- 7
# Schemes of number of observations
ON <- 4
#Number of functions
F <- 3
#Parameter variants
PV <- 2
#Guess/Lapse rate combinations
GL <- 3
#Noise types and parameters
N <- 1
#Number of simulations per all previous
NOS <- 750
NumberOfSimulations <- DS*ON*F*PV*GL*N*NOS
NumberOfSimulations
# number of Simulations
# NUmber of Distribution schemes
DS <- 7
# Schemes of number of observations
ON <- 4
#Sigmoid number
S <- 6
#Core number
C <- 3
#Parameter variants
PV <- 1
#Guess/Lapse rate combinations
GL <- 3
#Noise types and parameters
N <- 1
#Number of simulations per all previous
NOS <- 50
NumberOfSimulations <- DS*ON*S*C*PV*GL*N*NOS
NumberOfSimulations
# number of Simulations
# NUmber of Distribution schemes
DS <- 7
# Schemes of number of observations
ON <- 4
#Number of functions
F <- 3
#Parameter variants
PV <- 2
#Guess/Lapse rate combinations
GL <- 3
#Noise types and parameters
N <- 1
#Number of simulations per all previous
NOS <- 150
NumberOfSimulations <- DS*ON*F*PV*GL*N*NOS
NumberOfSimulations
# number of Simulations
# NUmber of Distribution schemes
DS <- 7
# Schemes of number of observations
ON <- 4
#Number of functions
F <- 3
#Parameter variants
PV <- 1
#Guess/Lapse rate combinations
GL <- 3
#Noise types and parameters
N <- 1
#Number of simulations per all previous
NOS <- 300
NumberOfSimulations <- DS*ON*F*PV*GL*N*NOS
NumberOfSimulations
# number of Simulations
# NUmber of Distribution schemes
DS <- 7
# Schemes of number of observations
ON <- 4
#Sigmoid number
S <- 6
#Core number
C <- 3
#Parameter variants
PV <- 1
#Guess/Lapse rate combinations
GL <- 3
#Noise types and parameters
N <- 1
#Number of simulations per all previous
NOS <- 50
NumberOfSimulations <- DS*ON*S*C*PV*GL*N*NOS
NumberOfSimulations
PF <- function(sigmoid, core, gamma, lambda, params){
model <- list()
if(is.character(sigmoid)){model$sigmoid <- sigmoid}
else{stop("Sigmoid must be a character.")}
if(is.character(core)){model$core <- core}
else{stop("Sigmoid must be a character.")}
if(is.numeric(gamma) && gamma < 1 && gamma >= 0){model$gamma <- gamma}
else{stop("Gamma must be numeric and in interval [0,1).")}
if(is.numeric(lambda) && lambda < 1 && lambda >= 0){model$lambda <- lambda}
else{stop("Lambda must be numeric and in interval [0,1).")}
if(gamma + lambda >= 1) stop("Summ of gamma and lambda must not be bigger, than 1.")
if(is.numeric(params)){model$params <- params}
else{stop("Parametrs of function must be numeric.")}
class(model) <- c("PF",class(model))
return(model)
}
library(PsyFuns)
library(dplyr)
library(ggplot2)
library(tidyr)
#Setting random seed
set.seed(1234)
### Sets of sampling schemes, and numbers of observations
setsOfPredictors <- list(
data.frame(predictor=c(7.09,  7.99,  8.68,  9.02,  9.71, 10.64), observations= 20, id=1, distr=1),
data.frame(predictor=c(4.72,  7.09,  7.99,  9.71, 10.64, 13.21), observations= 20, id=2, distr=2),
data.frame(predictor=c(7.09,  8.34, 10.64, 11.72, 13.21, 15.76), observations= 20, id=3, distr=3),
data.frame(predictor=c(4.72,  6.07,  7.09,  7.99,  8.85,  9.71), observations= 20, id=4, distr=4),
data.frame(predictor=c(4.37,  5.83,  6.90, 10.64, 12.38, 16.64), observations= 20, id=5, distr=5),
data.frame(predictor=c(7.09,  7.99,  8.85,  9.71, 10.64, 16.64), observations= 20, id=6, distr=6),
data.frame(predictor=c(7.46,  8.34,  9.19, 11.72, 13.21, 15.76), observations= 20, id=7, distr=7),
data.frame(predictor=c(7.09,  7.99,  8.68,  9.02,  9.71, 10.64), observations= 40, id=1, distr=1),
data.frame(predictor=c(4.72,  7.09,  7.99,  9.71, 10.64, 13.21), observations= 40, id=2, distr=2),
data.frame(predictor=c(7.09,  8.34, 10.64, 11.72, 13.21, 15.76), observations= 40, id=3, distr=3),
data.frame(predictor=c(4.72,  6.07,  7.09,  7.99,  8.85,  9.71), observations= 40, id=4, distr=4),
data.frame(predictor=c(4.37,  5.83,  6.90, 10.64, 12.38, 16.64), observations= 40, id=5, distr=5),
data.frame(predictor=c(7.09,  7.99,  8.85,  9.71, 10.64, 16.64), observations= 40, id=6, distr=6),
data.frame(predictor=c(7.46,  8.34,  9.19, 11.72, 13.21, 15.76), observations= 40, id=7, distr=7),
data.frame(predictor=c(7.09,  7.99,  8.68,  9.02,  9.71, 10.64), observations= 80, id=1, distr=1),
data.frame(predictor=c(4.72,  7.09,  7.99,  9.71, 10.64, 13.21), observations= 80, id=2, distr=2),
data.frame(predictor=c(7.09,  8.34, 10.64, 11.72, 13.21, 15.76), observations= 80, id=3, distr=3),
data.frame(predictor=c(4.72,  6.07,  7.09,  7.99,  8.85,  9.71), observations= 80, id=4, distr=4),
data.frame(predictor=c(4.37,  5.83,  6.90, 10.64, 12.38, 16.64), observations= 80, id=5, distr=5),
data.frame(predictor=c(7.09,  7.99,  8.85,  9.71, 10.64, 16.64), observations= 80, id=6, distr=6),
data.frame(predictor=c(7.46,  8.34,  9.19, 11.72, 13.21, 15.76), observations= 80, id=7, distr=7),
data.frame(predictor=c(7.09,  7.99,  8.68,  9.02,  9.71, 10.64), observations=160, id=1, distr=1),
data.frame(predictor=c(4.72,  7.09,  7.99,  9.71, 10.64, 13.21), observations=160, id=2, distr=2),
data.frame(predictor=c(7.09,  8.34, 10.64, 11.72, 13.21, 15.76), observations=160, id=3, distr=3),
data.frame(predictor=c(4.72,  6.07,  7.09,  7.99,  8.85,  9.71), observations=160, id=4, distr=4),
data.frame(predictor=c(4.37,  5.83,  6.90, 10.64, 12.38, 16.64), observations=160, id=5, distr=5),
data.frame(predictor=c(7.09,  7.99,  8.85,  9.71, 10.64, 16.64), observations=160, id=6, distr=6),
data.frame(predictor=c(7.46,  8.34,  9.19, 11.72, 13.21, 15.76), observations=160, id=7, distr=7)
)
memory.limit()
memory.size()
system('free -m')
system(paste0("cat /proc/",Sys.getpid(),"/status | grep VmSize"))
sessionInfo()
ulimit -a
(7.09 + 10.64)/2
(4.72 + 13.21)/2
(7.09 + 13.21)/2
(7.09 + 16376)/2
(7.09 + 15.76)/2
(4.72 + 15.76)/2
(4.72 + 9.71)/2
(7.09 + 10.64)/2
(4.72 + 13.21)/2
(7.09 + 15.76)/2
(4.72 + 9.71)/2
(4.37 + 16.64)/2
(7.09 + 16.64)/2
(7.46 + 15.76)/2
